<snippet>
	<content><![CDATA[
#define matrix vector<vector<ll>> 
class Math
{ 
public:
	// for  init_seive
	// int pr[N],divs[N];  
	// for get_factors
	// vector<int>factors[N];
	// void init_seive()
	// {
	// 	for(int i=2;i<N;i++)
	// 	{
	// 		if(pr[i]==0)
	// 		{
	// 			for(int j=i;j<N;j+=i)
	// 			{
	// 				int temp = j;
	// 				while(temp%i==0)
	// 				{
	// 					divs[j]++;
	// 					temp/=i;
	// 				}
	// 				pr[j]=1;
	// 			}	
	// 		}
			
	// 	}
	// }
	// void get_seive_factors(ll n)
	// {
	// 	for(int i=1;i<n;i++)
	// 	{
	// 		// if(factors[i].size()==0) // for prime factors
	// 		for(int j=i;j<n;j+=i)
	// 		{
	// 			factors[j].pb(i);
	// 		}
	// 	}
	// }
	vector<int> get_factors(ll n)
	{
		vector<int>factors;
		for(int i=1;i*i<=n;i++)
		{
			if(n%i==0)
			{
				if(i*i==n)
					factors.pb(i);
				else
				{
					factors.pb(i);
					factors.pb(n/i);
				}
			}
		}
		return factors;
	}
	vector<int> get_prime_factors(ll n)
	{
		vector<int>prime_factors;
		for(int i=2;i*i<=n;i++)
		{
			if(n%i==0)
			{
				prime_factors.pb(i);
				while(n%i==0)
				{
					n/=i;
				}
			}
		}
		if(n!=1)
			prime_factors.pb(n);
		return prime_factors;
	}

	matrix matmul(matrix &a,matrix &b)
	{
	  int i,j,k,n=a.size(),temp;
	  matrix ans(n,vector<ll>(n));
	  for(int i=0;i<n;i++)
	  {
	    for(int j=0;j<n;j++)
	    {
	      temp=0;
	      for(int k=0;k<n;k++)
	      {
	        temp=(temp+a[i][k]*b[j][k])%mod;
	      }
	      ans[i][j]=temp;
	    }
	  }
	  return ans;
	}
	matrix matpwr(matrix &a,int p)
	{
	  
	  int n=a.size();
	  matrix ans(n,vector<ll>(n));
	  for(int i=0;i<n;i++)
	    ans[i][i]=1;
	  while(p)
	  {
	    if(p&1)
	      ans=matmul(ans,a);
	    a=matmul(a,a);
	    p>>=1;
	  }
	  return ans;
	}
	ll pwr(ll a,ll b)
	{
	  ll ans=1;
	  while(b)
	  {
	    if(b&1)
	      ans=(ans*a)%mod;
	    a=(a*a)%mod;
	    b>>=1;
	  }
	  return ans;
	}
	ll exgcd(ll a,ll b,ll &x,ll &y)
	{
	  if(b==0)
	  {
	    x=1;
	    y=0;
	    return a;
	  }
	  ll x1,y1,gcd;
	  gcd = exgcd(b,a%b,x1,y1);
	  x=y1;
	  y=x1-(a/b)*y1;
	  return gcd;
	}
	int phi(int n)
	{
	  int ans=n;
	  for(int i=2;i*i<=n;i++)
	  {
	    if(n%i==0)
	    {
	      ans-=(ans/i);
	      while(n%i==0)
	        n/=i;
	    }
	  }
	  if(n>1)
	    ans-=ans/n;
	  return ans;
	}
	ll gcd(ll a, ll b){
	    if(b == 0)  return a;
	    return gcd(b, a%b);
	}
	ll lcm(ll a, ll b){
	    return (a*b) / gcd(a, b);
	}
	ll invmod(ll n){
	    return pwr(n, mod-2);
	}
	int check_prime(ll n)
	{
		for(int i=2;i*i<=n;i++)
			if(n%i==0)return 0;
		return 1;
	}

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>math_template</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->

</snippet>
